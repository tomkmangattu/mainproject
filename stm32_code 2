#include<AccelStepper.h>
#include <Servo.h>
#include <math.h>

#define FULLSTEP 4
#define HALFSTEP 8

AccelStepper stepper(FULLSTEP, 3, 5, 4, 6);
Servo shoulderServo;

void setup(){
  initStepper();
  shoulderServo.attach(PA0);
  
  Serial.begin(9600);
  delay(250);
}

void loop(){
  if(stepper.distanceToGo() == 0){
    delay(5000);
    calculate();
    Serial.println("-------------------");
  }else{
    stepper.run();
  }
}

void initStepper(){
  stepper.setMaxSpeed(1000);
  stepper.setAcceleration(50);
  stepper.setSpeed(500);
}

void moveStepper(int angle){
  
    int steppsToMove = map(angle, 0, 360, 0, 2048) - 1024;  // maps degreeValue to -1024 to 1024 range
    Serial.println(steppsToMove);
    stepper.moveTo(steppsToMove);

}

void moveShoulderServo(int angle){
   shoulderServo.write(angle);
}

void calculate(){
  int x1 = 0;
  int x2 = 54;
  int y1 = 0;
  int y2 = 36;
  int w = 6;
  int points[1000][2];
  int numPoints = 0;
  for (int x = y1; x <= y2; x += w) {
    for (int y = x1; y <= x2; y += w) {
      points[numPoints][0] = y;
      points[numPoints][1] = x;
      numPoints++;
    }
  }

  int x_max = 54;
  for (int i = 0; i < numPoints; i++) {
    points[i][0] = points[i][0] - x_max/2;
  }

  int l1 = 23;
  int l2 = 22;

  for (int i = 0; i < numPoints; i++) {
    int x = points[i][0];
    int y = points[i][1];
    float c2 = (x*x + y*y - l1*l1 - l2*l2) / (2.0 * l1 * l2);
    float s2 = sqrt(1 - c2*c2);
    float theta2 = atan2(s2, c2);
    float k1 = l1 + l2 * c2;
    float k2 = l2 * s2;
    float theta1 = atan2(y, x) - atan2(k2, k1);
    if (theta1 < 0) {
      theta1 = theta1 + 2 * PI;
    }
    if (theta1 > PI) {
      theta1 = theta1 - PI;
    }
    if (theta1 == 0 && theta2 == PI) {
      theta1 = PI / 2;
    }
    int theta1_degrees = round(theta1 * 180.0 / PI);
    int theta2_degrees = round(theta2 * 180.0 / PI);
    Serial.print(theta1_degrees);
    Serial.print(",");
    Serial.println(theta2_degrees);
    
    moveShoulderServo(theta1_degrees);
    moveStepper(theta2_degrees);
    
    while(!(stepper.distanceToGo() == 0)){
      stepper.run();
    }
  }
}
